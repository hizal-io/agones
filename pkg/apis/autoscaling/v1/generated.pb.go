// Copyright 2022 Google LLC All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code was autogenerated. Do not edit directly.
// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: agones.dev/agones/pkg/apis/autoscaling/v1/generated.proto

package v1

import (
	fmt "fmt"

	io "io"

	proto "github.com/gogo/protobuf/proto"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"

	k8s_io_apimachinery_pkg_types "k8s.io/apimachinery/pkg/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func (m *ServiceReference) Reset()      { *m = ServiceReference{} }
func (*ServiceReference) ProtoMessage() {}
func (*ServiceReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_b73e7dcfde160fe7, []int{0}
}
func (m *ServiceReference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ServiceReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceReference.Merge(m, src)
}
func (m *ServiceReference) XXX_Size() int {
	return m.Size()
}
func (m *ServiceReference) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceReference.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceReference proto.InternalMessageInfo

func (m *AggregatedPlayerStatus) Reset()      { *m = AggregatedPlayerStatus{} }
func (*AggregatedPlayerStatus) ProtoMessage() {}
func (*AggregatedPlayerStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_b73e7dcfde160fe7, []int{1}
}
func (m *AggregatedPlayerStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AggregatedPlayerStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AggregatedPlayerStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggregatedPlayerStatus.Merge(m, src)
}
func (m *AggregatedPlayerStatus) XXX_Size() int {
	return m.Size()
}
func (m *AggregatedPlayerStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_AggregatedPlayerStatus.DiscardUnknown(m)
}

var xxx_messageInfo_AggregatedPlayerStatus proto.InternalMessageInfo

func (m *FleetStatus) Reset()      { *m = FleetStatus{} }
func (*FleetStatus) ProtoMessage() {}
func (*FleetStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_b73e7dcfde160fe7, []int{2}
}
func (m *FleetStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FleetStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FleetStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FleetStatus.Merge(m, src)
}
func (m *FleetStatus) XXX_Size() int {
	return m.Size()
}
func (m *FleetStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_FleetStatus.DiscardUnknown(m)
}

var xxx_messageInfo_FleetStatus proto.InternalMessageInfo

func (m *BufferPolicy) Reset()      { *m = BufferPolicy{} }
func (*BufferPolicy) ProtoMessage() {}
func (*BufferPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_b73e7dcfde160fe7, []int{3}
}
func (m *BufferPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BufferPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BufferPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BufferPolicy.Merge(m, src)
}
func (m *BufferPolicy) XXX_Size() int {
	return m.Size()
}
func (m *BufferPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_BufferPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_BufferPolicy proto.InternalMessageInfo

func (m *FixedIntervalSync) Reset()      { *m = FixedIntervalSync{} }
func (*FixedIntervalSync) ProtoMessage() {}
func (*FixedIntervalSync) Descriptor() ([]byte, []int) {
	return fileDescriptor_b73e7dcfde160fe7, []int{4}
}
func (m *FixedIntervalSync) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FixedIntervalSync) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FixedIntervalSync) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FixedIntervalSync.Merge(m, src)
}
func (m *FixedIntervalSync) XXX_Size() int {
	return m.Size()
}
func (m *FixedIntervalSync) XXX_DiscardUnknown() {
	xxx_messageInfo_FixedIntervalSync.DiscardUnknown(m)
}

var xxx_messageInfo_FixedIntervalSync proto.InternalMessageInfo

func (m *FleetAutoscaleRequest) Reset()      { *m = FleetAutoscaleRequest{} }
func (*FleetAutoscaleRequest) ProtoMessage() {}
func (*FleetAutoscaleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b73e7dcfde160fe7, []int{5}
}
func (m *FleetAutoscaleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FleetAutoscaleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FleetAutoscaleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FleetAutoscaleRequest.Merge(m, src)
}
func (m *FleetAutoscaleRequest) XXX_Size() int {
	return m.Size()
}
func (m *FleetAutoscaleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FleetAutoscaleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FleetAutoscaleRequest proto.InternalMessageInfo

func (m *FleetAutoscaleResponse) Reset()      { *m = FleetAutoscaleResponse{} }
func (*FleetAutoscaleResponse) ProtoMessage() {}
func (*FleetAutoscaleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b73e7dcfde160fe7, []int{6}
}
func (m *FleetAutoscaleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FleetAutoscaleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FleetAutoscaleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FleetAutoscaleResponse.Merge(m, src)
}
func (m *FleetAutoscaleResponse) XXX_Size() int {
	return m.Size()
}
func (m *FleetAutoscaleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FleetAutoscaleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FleetAutoscaleResponse proto.InternalMessageInfo

func (m *FleetAutoscaleReview) Reset()      { *m = FleetAutoscaleReview{} }
func (*FleetAutoscaleReview) ProtoMessage() {}
func (*FleetAutoscaleReview) Descriptor() ([]byte, []int) {
	return fileDescriptor_b73e7dcfde160fe7, []int{7}
}
func (m *FleetAutoscaleReview) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FleetAutoscaleReview) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FleetAutoscaleReview) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FleetAutoscaleReview.Merge(m, src)
}
func (m *FleetAutoscaleReview) XXX_Size() int {
	return m.Size()
}
func (m *FleetAutoscaleReview) XXX_DiscardUnknown() {
	xxx_messageInfo_FleetAutoscaleReview.DiscardUnknown(m)
}

var xxx_messageInfo_FleetAutoscaleReview proto.InternalMessageInfo

func (m *FleetAutoscaler) Reset()      { *m = FleetAutoscaler{} }
func (*FleetAutoscaler) ProtoMessage() {}
func (*FleetAutoscaler) Descriptor() ([]byte, []int) {
	return fileDescriptor_b73e7dcfde160fe7, []int{8}
}
func (m *FleetAutoscaler) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FleetAutoscaler) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FleetAutoscaler) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FleetAutoscaler.Merge(m, src)
}
func (m *FleetAutoscaler) XXX_Size() int {
	return m.Size()
}
func (m *FleetAutoscaler) XXX_DiscardUnknown() {
	xxx_messageInfo_FleetAutoscaler.DiscardUnknown(m)
}

var xxx_messageInfo_FleetAutoscaler proto.InternalMessageInfo

func (m *FleetAutoscalerList) Reset()      { *m = FleetAutoscalerList{} }
func (*FleetAutoscalerList) ProtoMessage() {}
func (*FleetAutoscalerList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b73e7dcfde160fe7, []int{9}
}
func (m *FleetAutoscalerList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FleetAutoscalerList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FleetAutoscalerList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FleetAutoscalerList.Merge(m, src)
}
func (m *FleetAutoscalerList) XXX_Size() int {
	return m.Size()
}
func (m *FleetAutoscalerList) XXX_DiscardUnknown() {
	xxx_messageInfo_FleetAutoscalerList.DiscardUnknown(m)
}

var xxx_messageInfo_FleetAutoscalerList proto.InternalMessageInfo

func (m *FleetAutoscalerPolicy) Reset()      { *m = FleetAutoscalerPolicy{} }
func (*FleetAutoscalerPolicy) ProtoMessage() {}
func (*FleetAutoscalerPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_b73e7dcfde160fe7, []int{10}
}
func (m *FleetAutoscalerPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FleetAutoscalerPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FleetAutoscalerPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FleetAutoscalerPolicy.Merge(m, src)
}
func (m *FleetAutoscalerPolicy) XXX_Size() int {
	return m.Size()
}
func (m *FleetAutoscalerPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_FleetAutoscalerPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_FleetAutoscalerPolicy proto.InternalMessageInfo

func (m *FleetAutoscalerSpec) Reset()      { *m = FleetAutoscalerSpec{} }
func (*FleetAutoscalerSpec) ProtoMessage() {}
func (*FleetAutoscalerSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b73e7dcfde160fe7, []int{11}
}
func (m *FleetAutoscalerSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FleetAutoscalerSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FleetAutoscalerSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FleetAutoscalerSpec.Merge(m, src)
}
func (m *FleetAutoscalerSpec) XXX_Size() int {
	return m.Size()
}
func (m *FleetAutoscalerSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_FleetAutoscalerSpec.DiscardUnknown(m)
}

var xxx_messageInfo_FleetAutoscalerSpec proto.InternalMessageInfo

func (m *FleetAutoscalerStatus) Reset()      { *m = FleetAutoscalerStatus{} }
func (*FleetAutoscalerStatus) ProtoMessage() {}
func (*FleetAutoscalerStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_b73e7dcfde160fe7, []int{12}
}
func (m *FleetAutoscalerStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FleetAutoscalerStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FleetAutoscalerStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FleetAutoscalerStatus.Merge(m, src)
}
func (m *FleetAutoscalerStatus) XXX_Size() int {
	return m.Size()
}
func (m *FleetAutoscalerStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_FleetAutoscalerStatus.DiscardUnknown(m)
}

var xxx_messageInfo_FleetAutoscalerStatus proto.InternalMessageInfo

func (m *FleetAutoscalerSync) Reset()      { *m = FleetAutoscalerSync{} }
func (*FleetAutoscalerSync) ProtoMessage() {}
func (*FleetAutoscalerSync) Descriptor() ([]byte, []int) {
	return fileDescriptor_b73e7dcfde160fe7, []int{13}
}
func (m *FleetAutoscalerSync) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FleetAutoscalerSync) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FleetAutoscalerSync) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FleetAutoscalerSync.Merge(m, src)
}
func (m *FleetAutoscalerSync) XXX_Size() int {
	return m.Size()
}
func (m *FleetAutoscalerSync) XXX_DiscardUnknown() {
	xxx_messageInfo_FleetAutoscalerSync.DiscardUnknown(m)
}

var xxx_messageInfo_FleetAutoscalerSync proto.InternalMessageInfo

func (m *WebhookPolicy) Reset()      { *m = WebhookPolicy{} }
func (*WebhookPolicy) ProtoMessage() {}
func (*WebhookPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_b73e7dcfde160fe7, []int{14}
}
func (m *WebhookPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebhookPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WebhookPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebhookPolicy.Merge(m, src)
}
func (m *WebhookPolicy) XXX_Size() int {
	return m.Size()
}
func (m *WebhookPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_WebhookPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_WebhookPolicy proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ServiceReference)(nil), "agones.dev.agones.pkg.apis.autoscaling.v1.ServiceReference")
	proto.RegisterType((*AggregatedPlayerStatus)(nil), "agones.dev.agones.pkg.apis.autoscaling.v1.AggregatedPlayerStatus")
	proto.RegisterType((*FleetStatus)(nil), "agones.dev.agones.pkg.apis.autoscaling.v1.FleetStatus")
	proto.RegisterType((*BufferPolicy)(nil), "agones.dev.agones.pkg.apis.autoscaling.v1.BufferPolicy")
	proto.RegisterType((*FixedIntervalSync)(nil), "agones.dev.agones.pkg.apis.autoscaling.v1.FixedIntervalSync")
	proto.RegisterType((*FleetAutoscaleRequest)(nil), "agones.dev.agones.pkg.apis.autoscaling.v1.FleetAutoscaleRequest")
	proto.RegisterType((*FleetAutoscaleResponse)(nil), "agones.dev.agones.pkg.apis.autoscaling.v1.FleetAutoscaleResponse")
	proto.RegisterType((*FleetAutoscaleReview)(nil), "agones.dev.agones.pkg.apis.autoscaling.v1.FleetAutoscaleReview")
	proto.RegisterType((*FleetAutoscaler)(nil), "agones.dev.agones.pkg.apis.autoscaling.v1.FleetAutoscaler")
	proto.RegisterType((*FleetAutoscalerList)(nil), "agones.dev.agones.pkg.apis.autoscaling.v1.FleetAutoscalerList")
	proto.RegisterType((*FleetAutoscalerPolicy)(nil), "agones.dev.agones.pkg.apis.autoscaling.v1.FleetAutoscalerPolicy")
	proto.RegisterType((*FleetAutoscalerSpec)(nil), "agones.dev.agones.pkg.apis.autoscaling.v1.FleetAutoscalerSpec")
	proto.RegisterType((*FleetAutoscalerStatus)(nil), "agones.dev.agones.pkg.apis.autoscaling.v1.FleetAutoscalerStatus")
	proto.RegisterType((*FleetAutoscalerSync)(nil), "agones.dev.agones.pkg.apis.autoscaling.v1.FleetAutoscalerSync")
	proto.RegisterType((*WebhookPolicy)(nil), "agones.dev.agones.pkg.apis.autoscaling.v1.WebhookPolicy")
}

func init() {
	proto.RegisterFile("agones.dev/agones/pkg/apis/autoscaling/v1/generated.proto", fileDescriptor_b73e7dcfde160fe7)
}

var fileDescriptor_b73e7dcfde160fe7 = []byte{
	// 1337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xcf, 0x73, 0xdb, 0xc4,
	0x17, 0x8f, 0x62, 0xbb, 0x76, 0xd7, 0x49, 0x93, 0x6c, 0xbf, 0x6d, 0xd3, 0xce, 0x77, 0x9c, 0xa0,
	0x1e, 0x48, 0x98, 0x22, 0xb7, 0x01, 0x4a, 0xa1, 0xd0, 0xc1, 0x4a, 0xa6, 0x4c, 0x66, 0x52, 0xda,
	0x59, 0xb7, 0xc3, 0x0c, 0x74, 0x68, 0xd7, 0xf2, 0x8b, 0x2c, 0x22, 0x4b, 0x62, 0xb5, 0x72, 0x6b,
	0x4e, 0xfc, 0x05, 0x0c, 0x07, 0xfe, 0x01, 0xfe, 0x02, 0xae, 0xdc, 0xb8, 0xf6, 0xc2, 0x4c, 0x0f,
	0x1c, 0x7a, 0xca, 0x50, 0x73, 0xe5, 0xc2, 0x91, 0x9e, 0x98, 0x5d, 0xad, 0xac, 0x1f, 0x4e, 0xa6,
	0x76, 0xcb, 0x4d, 0xfb, 0xde, 0xfb, 0x7c, 0xde, 0xdb, 0xa7, 0xf7, 0x9e, 0x9e, 0xd0, 0x07, 0xd4,
	0xf6, 0x3d, 0x08, 0x8d, 0x2e, 0x0c, 0x9a, 0xf1, 0x63, 0x33, 0x38, 0xb0, 0x9b, 0x34, 0x70, 0xc2,
	0x26, 0x8d, 0xb8, 0x1f, 0x5a, 0xd4, 0x75, 0x3c, 0xbb, 0x39, 0xb8, 0xd2, 0xb4, 0xc1, 0x03, 0x46,
	0x39, 0x74, 0x8d, 0x80, 0xf9, 0xdc, 0xc7, 0x9b, 0x29, 0xd4, 0x50, 0x8f, 0xc1, 0x81, 0x6d, 0x08,
	0xa8, 0x91, 0x81, 0x1a, 0x83, 0x2b, 0x17, 0xde, 0xb6, 0x1d, 0xde, 0x8b, 0x3a, 0x86, 0xe5, 0xf7,
	0x9b, 0xb6, 0x6f, 0xfb, 0x4d, 0xc9, 0xd0, 0x89, 0xf6, 0xe5, 0x49, 0x1e, 0xe4, 0x53, 0xcc, 0x7c,
	0xe1, 0xdd, 0x83, 0x6b, 0xa1, 0xe1, 0xf8, 0x22, 0x8a, 0x3e, 0xb5, 0x7a, 0x8e, 0x07, 0x6c, 0x98,
	0x86, 0xd5, 0x07, 0x4e, 0x8f, 0x88, 0xe7, 0xc2, 0xd5, 0xe3, 0x50, 0x2c, 0xf2, 0xb8, 0xd3, 0x87,
	0x66, 0x68, 0xf5, 0xa0, 0x4f, 0x27, 0x70, 0xef, 0x1c, 0x87, 0x8b, 0xb8, 0xe3, 0x36, 0x1d, 0x8f,
	0x87, 0x9c, 0x15, 0x41, 0xfa, 0x4f, 0x1a, 0x5a, 0x6e, 0x03, 0x1b, 0x38, 0x16, 0x10, 0xd8, 0x07,
	0x06, 0x9e, 0x05, 0xb8, 0x89, 0x4e, 0x7a, 0xb4, 0x0f, 0x61, 0x40, 0x2d, 0x58, 0xd5, 0xd6, 0xb5,
	0x8d, 0x93, 0xe6, 0xca, 0x93, 0xc3, 0xb5, 0xb9, 0xd1, 0xe1, 0xda, 0xc9, 0xcf, 0x12, 0x05, 0x49,
	0x6d, 0xf0, 0x3a, 0x2a, 0x8b, 0xc3, 0xea, 0xbc, 0xb4, 0x5d, 0x50, 0xb6, 0x65, 0x61, 0x4b, 0xa4,
	0x06, 0xff, 0x1f, 0x95, 0x03, 0xca, 0x7b, 0xab, 0x25, 0x69, 0x51, 0x13, 0xda, 0x3b, 0x94, 0xf7,
	0x88, 0x94, 0x4a, 0xad, 0xcf, 0xf8, 0x6a, 0x79, 0x5d, 0xdb, 0xa8, 0x28, 0xad, 0xcf, 0x38, 0x91,
	0x52, 0xfd, 0x00, 0x9d, 0x6d, 0xd9, 0x36, 0x03, 0x5b, 0xc4, 0x7d, 0xc7, 0xa5, 0x43, 0x60, 0x6d,
	0x4e, 0x79, 0x14, 0xe2, 0x8b, 0xa8, 0x62, 0xf9, 0x91, 0xc7, 0x65, 0x90, 0x25, 0x73, 0x51, 0x39,
	0xae, 0x6c, 0x0b, 0x21, 0x89, 0x75, 0xf8, 0x12, 0xaa, 0x59, 0x34, 0xa0, 0x96, 0xc3, 0x87, 0x32,
	0xc0, 0x92, 0xb9, 0xac, 0xec, 0x6a, 0xdb, 0x4a, 0x4e, 0xc6, 0x16, 0xfa, 0xdf, 0xf3, 0xa8, 0x7e,
	0xd3, 0x05, 0xe0, 0xca, 0xc5, 0x25, 0x54, 0x63, 0x10, 0xb8, 0x8e, 0x45, 0x43, 0xe9, 0xa5, 0x92,
	0xa2, 0x89, 0x92, 0x93, 0xb1, 0x05, 0xbe, 0x8e, 0x16, 0x19, 0xd0, 0xee, 0x30, 0x51, 0x49, 0x87,
	0x15, 0xf3, 0x8c, 0x82, 0x2c, 0x92, 0xac, 0x92, 0xe4, 0x6d, 0xf1, 0x0e, 0x5a, 0x66, 0x10, 0x02,
	0x1b, 0x40, 0x77, 0x8c, 0x2f, 0x49, 0xfc, 0xaa, 0xc2, 0x2f, 0x93, 0x82, 0x9e, 0x4c, 0x20, 0xf0,
	0xa7, 0x68, 0x85, 0xba, 0xae, 0x6f, 0x89, 0x64, 0x8d, 0x69, 0xe2, 0xc4, 0x9e, 0x57, 0x34, 0x2b,
	0xad, 0xa2, 0x01, 0x99, 0xc4, 0xe0, 0x1e, 0xaa, 0x06, 0x32, 0xd9, 0xe1, 0x6a, 0x65, 0x5d, 0xdb,
	0xa8, 0x6f, 0xb5, 0x8c, 0xa9, 0x3b, 0xc5, 0x38, 0xfa, 0x85, 0x99, 0xf5, 0xd1, 0xe1, 0x5a, 0x35,
	0x96, 0x84, 0x24, 0xa1, 0xd7, 0x47, 0x1a, 0x5a, 0x30, 0xa3, 0xfd, 0x7d, 0x60, 0x77, 0x7c, 0xd7,
	0xb1, 0x86, 0xf8, 0x3d, 0x54, 0xef, 0xd3, 0xc7, 0x24, 0x9f, 0xf7, 0xd3, 0x2a, 0xfa, 0xfa, 0xad,
	0x54, 0x45, 0xb2, 0x76, 0x12, 0xe6, 0x78, 0x85, 0xdc, 0xa7, 0xb0, 0x54, 0x45, 0xb2, 0x76, 0xb8,
	0x8b, 0x50, 0x47, 0x7a, 0x6f, 0x3b, 0xdf, 0x82, 0xcc, 0x78, 0x7d, 0xeb, 0xb2, 0x11, 0x77, 0x93,
	0x91, 0xed, 0x26, 0x79, 0x5b, 0xd1, 0x4d, 0x46, 0xdc, 0x4d, 0xc6, 0xae, 0xc7, 0x6f, 0xb3, 0x36,
	0x67, 0x8e, 0x67, 0x9b, 0x58, 0xf9, 0x41, 0xe6, 0x98, 0x8b, 0x64, 0x78, 0xf5, 0x1b, 0x68, 0xe5,
	0xa6, 0xf3, 0x18, 0xba, 0xbb, 0x1e, 0x07, 0x36, 0xa0, 0x6e, 0x7b, 0xe8, 0x59, 0x78, 0x13, 0x55,
	0x43, 0xb0, 0x7c, 0xaf, 0x9b, 0x5c, 0x72, 0x49, 0xb1, 0x54, 0xdb, 0xb1, 0x98, 0x24, 0x7a, 0xfd,
	0xfb, 0x79, 0x74, 0x46, 0x16, 0x66, 0x4b, 0x65, 0x1a, 0x08, 0x7c, 0x13, 0x41, 0xc8, 0xb1, 0x89,
	0x4a, 0x91, 0xd3, 0x55, 0x8d, 0x7a, 0x59, 0x11, 0x94, 0xee, 0xed, 0xee, 0xbc, 0x38, 0x5c, 0x7b,
	0xe3, 0xb8, 0xa1, 0xc0, 0x87, 0x01, 0x84, 0xc6, 0xbd, 0xdd, 0x1d, 0x22, 0xc0, 0x53, 0x74, 0x70,
	0x6e, 0x28, 0x94, 0xa6, 0x18, 0x0a, 0x5f, 0xa1, 0x13, 0xa1, 0x7c, 0xeb, 0xb2, 0xfa, 0xea, 0x5b,
	0x57, 0x67, 0x28, 0x9f, 0x4c, 0x07, 0x9a, 0xa7, 0x94, 0x97, 0x13, 0xf1, 0x99, 0x28, 0x56, 0xfd,
	0x67, 0x0d, 0x9d, 0x2d, 0x26, 0x24, 0x0c, 0x7c, 0x2f, 0x84, 0xff, 0x24, 0x23, 0x17, 0x51, 0x45,
	0x92, 0xca, 0x94, 0xd4, 0xd2, 0xd9, 0xd2, 0x96, 0x9e, 0x62, 0x5d, 0x6e, 0x3a, 0x94, 0x5e, 0x36,
	0x1d, 0xf4, 0xbf, 0x34, 0xf4, 0xbf, 0x62, 0xc4, 0x03, 0x07, 0x1e, 0x61, 0x1b, 0x55, 0x59, 0xfc,
	0x32, 0x65, 0xcc, 0xf5, 0xad, 0x4f, 0x66, 0xcd, 0x55, 0xb1, 0x28, 0xe2, 0x4e, 0x53, 0x07, 0x92,
	0xb0, 0xe3, 0x03, 0x11, 0x6f, 0x9c, 0x24, 0x79, 0xaf, 0xd9, 0x9a, 0xfa, 0xe8, 0x6c, 0x9b, 0x0b,
	0xf1, 0x75, 0xe3, 0x13, 0x19, 0x3b, 0xd0, 0x7f, 0x9d, 0x47, 0x4b, 0x79, 0x08, 0xc3, 0x0f, 0x51,
	0x4d, 0x7c, 0xf7, 0xba, 0x94, 0x53, 0x75, 0xd5, 0xe3, 0x3b, 0x4d, 0x86, 0x20, 0xac, 0x85, 0xef,
	0xdb, 0x9d, 0xaf, 0xc1, 0xe2, 0xb7, 0x80, 0xd3, 0xb4, 0xd3, 0x52, 0x19, 0x19, 0xb3, 0xe2, 0x87,
	0xa8, 0x1c, 0x06, 0x60, 0xa9, 0xeb, 0xdd, 0x78, 0xe5, 0xeb, 0xb1, 0x76, 0x00, 0x56, 0xda, 0x09,
	0xe2, 0x44, 0x24, 0x33, 0xee, 0x8d, 0x0b, 0xbb, 0xf4, 0x9a, 0x2f, 0x8b, 0xbd, 0xa4, 0xc4, 0x7f,
	0xd7, 0xd0, 0xe9, 0x02, 0x62, 0xcf, 0x09, 0x39, 0xbe, 0x3f, 0x91, 0x45, 0x63, 0xba, 0x2c, 0x0a,
	0xb4, 0xcc, 0xe1, 0xb8, 0x4c, 0x13, 0x49, 0x26, 0x83, 0x0f, 0x50, 0xc5, 0xe1, 0xd0, 0x17, 0x03,
	0xb4, 0xb4, 0x51, 0xdf, 0xfa, 0xf0, 0xd5, 0xaf, 0x97, 0x76, 0xcd, 0xae, 0x20, 0x24, 0x31, 0xaf,
	0xfe, 0xe3, 0xc4, 0x28, 0x4b, 0x06, 0xff, 0xc7, 0xa8, 0x2c, 0xda, 0x50, 0x75, 0xee, 0x66, 0x92,
	0xfc, 0xbb, 0xc3, 0x00, 0x5e, 0x1c, 0xae, 0x9d, 0x3f, 0x12, 0x24, 0x94, 0x44, 0xc2, 0xf0, 0x97,
	0xe8, 0x44, 0x3c, 0x71, 0xd5, 0xdb, 0x7f, 0x7f, 0x86, 0xd0, 0xb3, 0x1f, 0x20, 0x13, 0x89, 0x97,
	0x11, 0x4b, 0x88, 0xa2, 0xc4, 0x0f, 0x50, 0xf5, 0x11, 0x74, 0x7a, 0xbe, 0x7f, 0xa0, 0xde, 0xfb,
	0xb5, 0x19, 0xd8, 0x3f, 0x8f, 0x91, 0x8a, 0x5e, 0x36, 0xa7, 0x12, 0x91, 0x84, 0x55, 0x4c, 0xf8,
	0xd3, 0x47, 0xd4, 0xa0, 0x98, 0xbc, 0xfb, 0x42, 0x2c, 0xa6, 0x6c, 0x71, 0x1d, 0xbb, 0x99, 0x28,
	0x48, 0x6a, 0x23, 0x0a, 0x34, 0x90, 0x8e, 0x54, 0x1a, 0x5e, 0xa3, 0x40, 0x55, 0xc0, 0xe3, 0x02,
	0x8d, 0xcf, 0x44, 0xf1, 0xe3, 0xfb, 0xa8, 0x1c, 0x0e, 0x3d, 0x4b, 0x25, 0xe4, 0x75, 0x9a, 0x6d,
	0xe8, 0x59, 0xf1, 0xe2, 0x27, 0x9e, 0x88, 0x64, 0xd5, 0xff, 0x99, 0xac, 0x13, 0xb5, 0x95, 0xb5,
	0xd0, 0x92, 0x15, 0x31, 0x06, 0x1e, 0x2f, 0x2c, 0x09, 0xe7, 0x54, 0xa0, 0x4b, 0xdb, 0x79, 0x35,
	0x29, 0xda, 0x0b, 0x8a, 0x2e, 0x84, 0x0e, 0xcb, 0x6c, 0x49, 0xf3, 0x79, 0x8a, 0x9d, 0xbc, 0x9a,
	0x14, 0xed, 0xb1, 0x85, 0x16, 0x5d, 0x1a, 0x72, 0xf9, 0x45, 0xb8, 0xeb, 0xf4, 0x93, 0xdd, 0xe1,
	0xad, 0xe9, 0x7a, 0x51, 0x20, 0xcc, 0x15, 0xb1, 0x15, 0xee, 0x65, 0x49, 0x48, 0x9e, 0x53, 0x2c,
	0x35, 0xb4, 0xe3, 0xc2, 0x5d, 0x5f, 0x8a, 0xe4, 0xb7, 0xb4, 0x96, 0x2e, 0x35, 0xad, 0x54, 0x45,
	0xb2, 0x76, 0xf8, 0x06, 0x3a, 0xa5, 0xb2, 0xbd, 0xe7, 0xf4, 0x1d, 0x0e, 0x5d, 0xb9, 0xc4, 0xd5,
	0xcc, 0xb3, 0x0a, 0x79, 0xaa, 0x9d, 0xd3, 0x92, 0x82, 0xb5, 0xfe, 0xdb, 0xe4, 0xe8, 0x91, 0x1b,
	0xcb, 0xf5, 0x5c, 0x87, 0xbe, 0x59, 0xe8, 0xd0, 0x73, 0x47, 0x40, 0x32, 0xfd, 0x39, 0x44, 0x8b,
	0xfb, 0xd9, 0x1d, 0x48, 0xd5, 0xe7, 0x47, 0xb3, 0xd4, 0x4d, 0x71, 0x87, 0x4a, 0x97, 0xeb, 0x9c,
	0x8a, 0xe4, 0x3d, 0xe9, 0xbf, 0x68, 0x68, 0x31, 0xd7, 0x84, 0xf8, 0x3c, 0x2a, 0x45, 0xcc, 0x55,
	0xab, 0x4c, 0x55, 0x2e, 0x08, 0x64, 0x8f, 0x08, 0x19, 0xee, 0x88, 0xb5, 0x4c, 0xfe, 0x14, 0xa9,
	0xf1, 0x7a, 0x7d, 0x86, 0x08, 0x8b, 0xbf, 0x53, 0x71, 0xb7, 0x27, 0xd2, 0x84, 0x18, 0x6f, 0x88,
	0xdf, 0x12, 0x33, 0xf2, 0xba, 0x6a, 0xc5, 0x58, 0x88, 0xbf, 0xa3, 0xdb, 0xad, 0x58, 0x46, 0xc6,
	0x5a, 0xf3, 0xf6, 0x93, 0xe7, 0x8d, 0xb9, 0xa7, 0xcf, 0x1b, 0x73, 0xcf, 0x9e, 0x37, 0xe6, 0xbe,
	0x1b, 0x35, 0xb4, 0x27, 0xa3, 0x86, 0xf6, 0x74, 0xd4, 0xd0, 0x9e, 0x8d, 0x1a, 0xda, 0x1f, 0xa3,
	0x86, 0xf6, 0xc3, 0x9f, 0x8d, 0xb9, 0x2f, 0x36, 0xa7, 0xfe, 0x03, 0xfe, 0x37, 0x00, 0x00, 0xff,
	0xff, 0x74, 0x83, 0x6d, 0xfb, 0x2d, 0x0f, 0x00, 0x00,
}

func (m *ServiceReference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceReference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceReference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Port != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Port))
		i--
		dAtA[i] = 0x20
	}
	if m.Path != nil {
		i -= len(*m.Path)
		copy(dAtA[i:], *m.Path)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Path)))
		i--
		dAtA[i] = 0x1a
	}
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Namespace)
	copy(dAtA[i:], m.Namespace)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Namespace)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AggregatedPlayerStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggregatedPlayerStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AggregatedPlayerStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.Capacity))
	i--
	dAtA[i] = 0x10
	i = encodeVarintGenerated(dAtA, i, uint64(m.Count))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *FleetStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FleetStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FleetStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Players != nil {
		{
			size, err := m.Players.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	i = encodeVarintGenerated(dAtA, i, uint64(m.AllocatedReplicas))
	i--
	dAtA[i] = 0x20
	i = encodeVarintGenerated(dAtA, i, uint64(m.ReservedReplicas))
	i--
	dAtA[i] = 0x18
	i = encodeVarintGenerated(dAtA, i, uint64(m.ReadyReplicas))
	i--
	dAtA[i] = 0x10
	i = encodeVarintGenerated(dAtA, i, uint64(m.Replicas))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *BufferPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BufferPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BufferPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BufferSize.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	i = encodeVarintGenerated(dAtA, i, uint64(m.MinReplicas))
	i--
	dAtA[i] = 0x10
	i = encodeVarintGenerated(dAtA, i, uint64(m.MaxReplicas))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *FixedIntervalSync) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FixedIntervalSync) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FixedIntervalSync) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.Seconds))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *FleetAutoscaleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FleetAutoscaleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FleetAutoscaleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	i -= len(m.Namespace)
	copy(dAtA[i:], m.Namespace)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Namespace)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x12
	i -= len(m.UID)
	copy(dAtA[i:], m.UID)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.UID)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *FleetAutoscaleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FleetAutoscaleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FleetAutoscaleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.Replicas))
	i--
	dAtA[i] = 0x18
	i--
	if m.Scale {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	i -= len(m.UID)
	copy(dAtA[i:], m.UID)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.UID)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *FleetAutoscaleReview) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FleetAutoscaleReview) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FleetAutoscaleReview) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FleetAutoscaler) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FleetAutoscaler) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FleetAutoscaler) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *FleetAutoscalerList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FleetAutoscalerList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FleetAutoscalerList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *FleetAutoscalerPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FleetAutoscalerPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FleetAutoscalerPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Webhook != nil {
		{
			size, err := m.Webhook.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Buffer != nil {
		{
			size, err := m.Buffer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i -= len(m.Type)
	copy(dAtA[i:], m.Type)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Type)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *FleetAutoscalerSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FleetAutoscalerSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FleetAutoscalerSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sync != nil {
		{
			size, err := m.Sync.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Policy.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	i -= len(m.FleetName)
	copy(dAtA[i:], m.FleetName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.FleetName)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *FleetAutoscalerStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FleetAutoscalerStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FleetAutoscalerStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.ScalingLimited {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x28
	i--
	if m.AbleToScale {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	if m.LastScaleTime != nil {
		{
			size, err := m.LastScaleTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	i = encodeVarintGenerated(dAtA, i, uint64(m.DesiredReplicas))
	i--
	dAtA[i] = 0x10
	i = encodeVarintGenerated(dAtA, i, uint64(m.CurrentReplicas))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *FleetAutoscalerSync) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FleetAutoscalerSync) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FleetAutoscalerSync) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FixedInterval.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	i -= len(m.Type)
	copy(dAtA[i:], m.Type)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Type)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *WebhookPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebhookPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebhookPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.URL != nil {
		i -= len(*m.URL)
		copy(dAtA[i:], *m.URL)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.URL)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CABundle != nil {
		i -= len(m.CABundle)
		copy(dAtA[i:], m.CABundle)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.CABundle)))
		i--
		dAtA[i] = 0x12
	}
	if m.Service != nil {
		{
			size, err := m.Service.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenerated(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenerated(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ServiceReference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	if m.Path != nil {
		l = len(*m.Path)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Port != nil {
		n += 1 + sovGenerated(uint64(*m.Port))
	}
	return n
}

func (m *AggregatedPlayerStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.Count))
	n += 1 + sovGenerated(uint64(m.Capacity))
	return n
}

func (m *FleetStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.Replicas))
	n += 1 + sovGenerated(uint64(m.ReadyReplicas))
	n += 1 + sovGenerated(uint64(m.ReservedReplicas))
	n += 1 + sovGenerated(uint64(m.AllocatedReplicas))
	if m.Players != nil {
		l = m.Players.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *BufferPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.MaxReplicas))
	n += 1 + sovGenerated(uint64(m.MinReplicas))
	l = m.BufferSize.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *FixedIntervalSync) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.Seconds))
	return n
}

func (m *FleetAutoscaleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UID)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Namespace)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *FleetAutoscaleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UID)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	n += 1 + sovGenerated(uint64(m.Replicas))
	return n
}

func (m *FleetAutoscaleReview) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *FleetAutoscaler) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *FleetAutoscalerList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *FleetAutoscalerPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	n += 1 + l + sovGenerated(uint64(l))
	if m.Buffer != nil {
		l = m.Buffer.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Webhook != nil {
		l = m.Webhook.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *FleetAutoscalerSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FleetName)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Policy.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.Sync != nil {
		l = m.Sync.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *FleetAutoscalerStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.CurrentReplicas))
	n += 1 + sovGenerated(uint64(m.DesiredReplicas))
	if m.LastScaleTime != nil {
		l = m.LastScaleTime.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	n += 2
	n += 2
	return n
}

func (m *FleetAutoscalerSync) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.FixedInterval.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *WebhookPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Service != nil {
		l = m.Service.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.CABundle != nil {
		l = len(m.CABundle)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.URL != nil {
		l = len(*m.URL)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func sovGenerated(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenerated(x uint64) (n int) {
	return sovGenerated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ServiceReference) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceReference{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Path:` + valueToStringGenerated(this.Path) + `,`,
		`Port:` + valueToStringGenerated(this.Port) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AggregatedPlayerStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AggregatedPlayerStatus{`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`Capacity:` + fmt.Sprintf("%v", this.Capacity) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FleetStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FleetStatus{`,
		`Replicas:` + fmt.Sprintf("%v", this.Replicas) + `,`,
		`ReadyReplicas:` + fmt.Sprintf("%v", this.ReadyReplicas) + `,`,
		`ReservedReplicas:` + fmt.Sprintf("%v", this.ReservedReplicas) + `,`,
		`AllocatedReplicas:` + fmt.Sprintf("%v", this.AllocatedReplicas) + `,`,
		`Players:` + strings.Replace(this.Players.String(), "AggregatedPlayerStatus", "AggregatedPlayerStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BufferPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BufferPolicy{`,
		`MaxReplicas:` + fmt.Sprintf("%v", this.MaxReplicas) + `,`,
		`MinReplicas:` + fmt.Sprintf("%v", this.MinReplicas) + `,`,
		`BufferSize:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.BufferSize), "IntOrString", "intstr.IntOrString", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FixedIntervalSync) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FixedIntervalSync{`,
		`Seconds:` + fmt.Sprintf("%v", this.Seconds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FleetAutoscaleRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FleetAutoscaleRequest{`,
		`UID:` + fmt.Sprintf("%v", this.UID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "FleetStatus", "FleetStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FleetAutoscaleResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FleetAutoscaleResponse{`,
		`UID:` + fmt.Sprintf("%v", this.UID) + `,`,
		`Scale:` + fmt.Sprintf("%v", this.Scale) + `,`,
		`Replicas:` + fmt.Sprintf("%v", this.Replicas) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FleetAutoscaleReview) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FleetAutoscaleReview{`,
		`Request:` + strings.Replace(this.Request.String(), "FleetAutoscaleRequest", "FleetAutoscaleRequest", 1) + `,`,
		`Response:` + strings.Replace(this.Response.String(), "FleetAutoscaleResponse", "FleetAutoscaleResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FleetAutoscaler) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FleetAutoscaler{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "FleetAutoscalerSpec", "FleetAutoscalerSpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "FleetAutoscalerStatus", "FleetAutoscalerStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FleetAutoscalerList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]FleetAutoscaler{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "FleetAutoscaler", "FleetAutoscaler", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&FleetAutoscalerList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *FleetAutoscalerPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FleetAutoscalerPolicy{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Buffer:` + strings.Replace(this.Buffer.String(), "BufferPolicy", "BufferPolicy", 1) + `,`,
		`Webhook:` + strings.Replace(this.Webhook.String(), "WebhookPolicy", "WebhookPolicy", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FleetAutoscalerSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FleetAutoscalerSpec{`,
		`FleetName:` + fmt.Sprintf("%v", this.FleetName) + `,`,
		`Policy:` + strings.Replace(strings.Replace(this.Policy.String(), "FleetAutoscalerPolicy", "FleetAutoscalerPolicy", 1), `&`, ``, 1) + `,`,
		`Sync:` + strings.Replace(this.Sync.String(), "FleetAutoscalerSync", "FleetAutoscalerSync", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FleetAutoscalerStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FleetAutoscalerStatus{`,
		`CurrentReplicas:` + fmt.Sprintf("%v", this.CurrentReplicas) + `,`,
		`DesiredReplicas:` + fmt.Sprintf("%v", this.DesiredReplicas) + `,`,
		`LastScaleTime:` + strings.Replace(fmt.Sprintf("%v", this.LastScaleTime), "Time", "v1.Time", 1) + `,`,
		`AbleToScale:` + fmt.Sprintf("%v", this.AbleToScale) + `,`,
		`ScalingLimited:` + fmt.Sprintf("%v", this.ScalingLimited) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FleetAutoscalerSync) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FleetAutoscalerSync{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`FixedInterval:` + strings.Replace(strings.Replace(this.FixedInterval.String(), "FixedIntervalSync", "FixedIntervalSync", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WebhookPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WebhookPolicy{`,
		`Service:` + strings.Replace(this.Service.String(), "ServiceReference", "ServiceReference", 1) + `,`,
		`CABundle:` + valueToStringGenerated(this.CABundle) + `,`,
		`URL:` + valueToStringGenerated(this.URL) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGenerated(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ServiceReference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceReference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceReference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Path = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Port = &v
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AggregatedPlayerStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggregatedPlayerStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggregatedPlayerStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capacity", wireType)
			}
			m.Capacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Capacity |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FleetStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FleetStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FleetStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replicas", wireType)
			}
			m.Replicas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Replicas |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadyReplicas", wireType)
			}
			m.ReadyReplicas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadyReplicas |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservedReplicas", wireType)
			}
			m.ReservedReplicas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReservedReplicas |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocatedReplicas", wireType)
			}
			m.AllocatedReplicas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllocatedReplicas |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Players == nil {
				m.Players = &AggregatedPlayerStatus{}
			}
			if err := m.Players.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BufferPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BufferPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BufferPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxReplicas", wireType)
			}
			m.MaxReplicas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxReplicas |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinReplicas", wireType)
			}
			m.MinReplicas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinReplicas |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferSize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BufferSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FixedIntervalSync) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FixedIntervalSync: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FixedIntervalSync: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seconds", wireType)
			}
			m.Seconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FleetAutoscaleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FleetAutoscaleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FleetAutoscaleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UID = k8s_io_apimachinery_pkg_types.UID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FleetAutoscaleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FleetAutoscaleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FleetAutoscaleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UID = k8s_io_apimachinery_pkg_types.UID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scale", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Scale = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replicas", wireType)
			}
			m.Replicas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Replicas |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FleetAutoscaleReview) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FleetAutoscaleReview: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FleetAutoscaleReview: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &FleetAutoscaleRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &FleetAutoscaleResponse{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FleetAutoscaler) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FleetAutoscaler: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FleetAutoscaler: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FleetAutoscalerList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FleetAutoscalerList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FleetAutoscalerList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, FleetAutoscaler{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FleetAutoscalerPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FleetAutoscalerPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FleetAutoscalerPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = FleetAutoscalerPolicyType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buffer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Buffer == nil {
				m.Buffer = &BufferPolicy{}
			}
			if err := m.Buffer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Webhook", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Webhook == nil {
				m.Webhook = &WebhookPolicy{}
			}
			if err := m.Webhook.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FleetAutoscalerSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FleetAutoscalerSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FleetAutoscalerSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FleetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FleetName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Policy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sync", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sync == nil {
				m.Sync = &FleetAutoscalerSync{}
			}
			if err := m.Sync.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FleetAutoscalerStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FleetAutoscalerStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FleetAutoscalerStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentReplicas", wireType)
			}
			m.CurrentReplicas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentReplicas |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredReplicas", wireType)
			}
			m.DesiredReplicas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DesiredReplicas |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastScaleTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastScaleTime == nil {
				m.LastScaleTime = &v1.Time{}
			}
			if err := m.LastScaleTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbleToScale", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AbleToScale = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScalingLimited", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ScalingLimited = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FleetAutoscalerSync) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FleetAutoscalerSync: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FleetAutoscalerSync: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = FleetAutoscalerSyncType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixedInterval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FixedInterval.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebhookPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebhookPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebhookPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Service == nil {
				m.Service = &ServiceReference{}
			}
			if err := m.Service.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CABundle", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CABundle = append(m.CABundle[:0], dAtA[iNdEx:postIndex]...)
			if m.CABundle == nil {
				m.CABundle = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.URL = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenerated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenerated
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenerated
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenerated        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenerated          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenerated = fmt.Errorf("proto: unexpected end of group")
)
