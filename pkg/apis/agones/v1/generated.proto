// Copyright 2022 Google LLC All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code was autogenerated. Do not edit directly.

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package agones.dev.agones.pkg.apis.agones.v1;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "k8s.io/api/apps/v1/generated.proto";
import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option (gogoproto.marshaler_all) = true;
option (gogoproto.stable_marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_enum_prefix_all) = false;
option (gogoproto.goproto_getters_all) = false;
option go_package = "agones.dev/agones/pkg/apis/agones/v1";

// AggregatedPlayerStatus stores total player tracking values
message AggregatedPlayerStatus {
  optional int64 count = 1 [(gogoproto.customname) = "Count", (gogoproto.nullable) = false];

  optional int64 capacity = 2 [(gogoproto.customname) = "Capacity", (gogoproto.nullable) = false];
}

// Fleet is the data structure for a Fleet resource
message Fleet {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1 [(gogoproto.customname) = "ObjectMeta", (gogoproto.nullable) = false];

  optional FleetSpec spec = 2 [(gogoproto.customname) = "Spec", (gogoproto.nullable) = false];

  optional FleetStatus status = 3 [(gogoproto.customname) = "Status", (gogoproto.nullable) = false];
}

// FleetList is a list of Fleet resources
message FleetList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1 [(gogoproto.customname) = "ListMeta", (gogoproto.nullable) = false];

  repeated Fleet items = 2 [(gogoproto.customname) = "Items", (gogoproto.nullable) = false];
}

// FleetSpec is the spec for a Fleet
message FleetSpec {
  // Replicas are the number of GameServers that should be in this set. Defaults to 0.
  optional int32 replicas = 1 [(gogoproto.customname) = "Replicas", (gogoproto.nullable) = false];

  // Deployment strategy
  optional k8s.io.api.apps.v1.DeploymentStrategy strategy = 2 [(gogoproto.customname) = "Strategy", (gogoproto.nullable) = false];

  // Scheduling strategy. Defaults to "Packed".
  optional string scheduling = 3 [(gogoproto.casttype) = "agones.dev/agones/pkg/apis.SchedulingStrategy", (gogoproto.customname) = "Scheduling", (gogoproto.nullable) = false];

  // Template the GameServer template to apply for this Fleet
  optional GameServerTemplateSpec template = 4 [(gogoproto.customname) = "Template", (gogoproto.nullable) = false];
}

// FleetStatus is the status of a Fleet
message FleetStatus {
  // Replicas the total number of current GameServer replicas
  optional int32 replicas = 1 [(gogoproto.customname) = "Replicas", (gogoproto.nullable) = false];

  // ReadyReplicas are the number of Ready GameServer replicas
  optional int32 readyReplicas = 2 [(gogoproto.customname) = "ReadyReplicas", (gogoproto.nullable) = false];

  // ReservedReplicas are the total number of Reserved GameServer replicas in this fleet.
  // Reserved instances won't be deleted on scale down, but won't cause an autoscaler to scale up.
  optional int32 reservedReplicas = 3 [(gogoproto.customname) = "ReservedReplicas", (gogoproto.nullable) = false];

  // AllocatedReplicas are the number of Allocated GameServer replicas
  optional int32 allocatedReplicas = 4 [(gogoproto.customname) = "AllocatedReplicas", (gogoproto.nullable) = false];

  // [Stage:Alpha]
  // [FeatureFlag:PlayerTracking]
  // Players are the current total player capacity and count for this Fleet
  // +optional
  optional AggregatedPlayerStatus players = 5 [(gogoproto.customname) = "Players"];
}

// GameServer is the data structure for a GameServer resource.
// It is worth noting that while there is a `GameServerStatus` Status entry for the `GameServer`, it is not
// defined as a subresource - unlike `Fleet` and other Agones resources.
// This is so that we can retain the ability to change multiple aspects of a `GameServer` in a single atomic operation,
// which is particularly useful for operations such as allocation.
message GameServer {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1 [(gogoproto.customname) = "ObjectMeta", (gogoproto.nullable) = false];

  optional GameServerSpec spec = 2 [(gogoproto.customname) = "Spec", (gogoproto.nullable) = false];

  optional GameServerStatus status = 3 [(gogoproto.customname) = "Status", (gogoproto.nullable) = false];
}

// GameServerList is a list of GameServer resources
message GameServerList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1 [(gogoproto.customname) = "ListMeta", (gogoproto.nullable) = false];

  repeated GameServer items = 2 [(gogoproto.customname) = "Items", (gogoproto.nullable) = false];
}

// GameServerPort defines a set of Ports that
// are to be exposed via the GameServer
message GameServerPort {
  // Name is the descriptive name of the port
  optional string name = 1 [(gogoproto.customname) = "Name", (gogoproto.nullable) = false];

  // PortPolicy defines the policy for how the HostPort is populated.
  // Dynamic port will allocate a HostPort within the selected MIN_PORT and MAX_PORT range passed to the controller
  // at installation time.
  // When `Static` portPolicy is specified, `HostPort` is required, to specify the port that game clients will
  // connect to
  optional string portPolicy = 2 [(gogoproto.casttype) = "PortPolicy", (gogoproto.customname) = "PortPolicy", (gogoproto.nullable) = false];

  // Container is the name of the container on which to open the port. Defaults to the game server container.
  // +optional
  optional string container = 3 [(gogoproto.customname) = "Container"];

  // ContainerPort is the port that is being opened on the specified container's process
  optional int32 containerPort = 4 [(gogoproto.customname) = "ContainerPort", (gogoproto.nullable) = false];

  // HostPort the port exposed on the host for clients to connect to
  optional int32 hostPort = 5 [(gogoproto.customname) = "HostPort", (gogoproto.nullable) = false];

  // Protocol is the network protocol being used. Defaults to UDP. TCP and TCPUDP are other options.
  optional string protocol = 6 [(gogoproto.casttype) = "k8s.io/api/core/v1.Protocol", (gogoproto.customname) = "Protocol", (gogoproto.nullable) = false];
}

// GameServerSet is the data structure for a set of GameServers.
// This matches philosophically with the relationship between
// Deployments and ReplicaSets
message GameServerSet {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1 [(gogoproto.customname) = "ObjectMeta", (gogoproto.nullable) = false];

  optional GameServerSetSpec spec = 2 [(gogoproto.customname) = "Spec", (gogoproto.nullable) = false];

  optional GameServerSetStatus status = 3 [(gogoproto.customname) = "Status", (gogoproto.nullable) = false];
}

// GameServerSetList is a list of GameServerSet resources
message GameServerSetList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1 [(gogoproto.customname) = "ListMeta", (gogoproto.nullable) = false];

  repeated GameServerSet items = 2 [(gogoproto.customname) = "Items", (gogoproto.nullable) = false];
}

// GameServerSetSpec the specification for GameServerSet
message GameServerSetSpec {
  // Replicas are the number of GameServers that should be in this set
  optional int32 replicas = 1 [(gogoproto.customname) = "Replicas", (gogoproto.nullable) = false];

  // Scheduling strategy. Defaults to "Packed".
  optional string scheduling = 2 [(gogoproto.casttype) = "agones.dev/agones/pkg/apis.SchedulingStrategy", (gogoproto.customname) = "Scheduling", (gogoproto.nullable) = false];

  // Template the GameServer template to apply for this GameServerSet
  optional GameServerTemplateSpec template = 3 [(gogoproto.customname) = "Template", (gogoproto.nullable) = false];
}

// GameServerSetStatus is the status of a GameServerSet
message GameServerSetStatus {
  // Replicas is the total number of current GameServer replicas
  optional int32 replicas = 1 [(gogoproto.customname) = "Replicas", (gogoproto.nullable) = false];

  // ReadyReplicas is the number of Ready GameServer replicas
  optional int32 readyReplicas = 2 [(gogoproto.customname) = "ReadyReplicas", (gogoproto.nullable) = false];

  // ReservedReplicas is the number of Reserved GameServer replicas
  optional int32 reservedReplicas = 3 [(gogoproto.customname) = "ReservedReplicas", (gogoproto.nullable) = false];

  // AllocatedReplicas is the number of Allocated GameServer replicas
  optional int32 allocatedReplicas = 4 [(gogoproto.customname) = "AllocatedReplicas", (gogoproto.nullable) = false];

  // ShutdownReplicas is the number of Shutdown GameServers replicas
  optional int32 shutdownReplicas = 5 [(gogoproto.customname) = "ShutdownReplicas", (gogoproto.nullable) = false];

  // [Stage:Alpha]
  // [FeatureFlag:PlayerTracking]
  // Players is the current total player capacity and count for this GameServerSet
  // +optional
  optional AggregatedPlayerStatus players = 6 [(gogoproto.customname) = "Players"];
}

// GameServerSpec is the spec for a GameServer resource
message GameServerSpec {
  // Container specifies which Pod container is the game server. Only required if there is more than one
  // container defined
  optional string container = 1 [(gogoproto.customname) = "Container", (gogoproto.nullable) = false];

  // Ports are the array of ports that can be exposed via the game server
  repeated GameServerPort ports = 2 [(gogoproto.customname) = "Ports", (gogoproto.nullable) = false];

  // Health configures health checking
  optional Health health = 3 [(gogoproto.customname) = "Health", (gogoproto.nullable) = false];

  // Scheduling strategy. Defaults to "Packed"
  optional string scheduling = 4 [(gogoproto.casttype) = "agones.dev/agones/pkg/apis.SchedulingStrategy", (gogoproto.customname) = "Scheduling", (gogoproto.nullable) = false];

  // SdkServer specifies parameters for the Agones SDK Server sidecar container
  optional SdkServer sdkServer = 5 [(gogoproto.customname) = "SdkServer", (gogoproto.nullable) = false];

  // Template describes the Pod that will be created for the GameServer
  optional k8s.io.api.core.v1.PodTemplateSpec template = 6 [(gogoproto.customname) = "Template", (gogoproto.nullable) = false];

  // (Alpha, PlayerTracking feature flag) Players provides the configuration for player tracking features.
  // +optional
  optional PlayersSpec players = 7 [(gogoproto.customname) = "Players"];
}

// GameServerStatus is the status for a GameServer resource
message GameServerStatus {
  // GameServerState is the current state of a GameServer, e.g. Creating, Starting, Ready, etc
  optional string state = 1 [(gogoproto.casttype) = "GameServerState", (gogoproto.customname) = "State", (gogoproto.nullable) = false];

  repeated GameServerStatusPort ports = 2 [(gogoproto.customname) = "Ports", (gogoproto.nullable) = false];

  optional string address = 3 [(gogoproto.customname) = "Address", (gogoproto.nullable) = false];

  optional string nodeName = 4 [(gogoproto.customname) = "NodeName", (gogoproto.nullable) = false];

  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time reservedUntil = 5 [(gogoproto.customname) = "ReservedUntil"];

  // [Stage:Alpha]
  // [FeatureFlag:PlayerTracking]
  // +optional
  optional PlayerStatus players = 6 [(gogoproto.customname) = "Players"];
}

// GameServerStatusPort shows the port that was allocated to a
// GameServer.
message GameServerStatusPort {
  optional string name = 1 [(gogoproto.customname) = "Name", (gogoproto.nullable) = false];

  optional int32 port = 2 [(gogoproto.customname) = "Port", (gogoproto.nullable) = false];
}

// GameServerTemplateSpec is a template for GameServers
message GameServerTemplateSpec {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1 [(gogoproto.customname) = "ObjectMeta", (gogoproto.nullable) = false];

  optional GameServerSpec spec = 2 [(gogoproto.customname) = "Spec", (gogoproto.nullable) = false];
}

// Health configures health checking on the GameServer
message Health {
  // Disabled is whether health checking is disabled or not
  optional bool disabled = 1 [(gogoproto.customname) = "Disabled", (gogoproto.nullable) = false];

  // PeriodSeconds is the number of seconds each health ping has to occur in
  optional int32 periodSeconds = 2 [(gogoproto.customname) = "PeriodSeconds", (gogoproto.nullable) = false];

  // FailureThreshold how many failures in a row constitutes unhealthy
  optional int32 failureThreshold = 3 [(gogoproto.customname) = "FailureThreshold", (gogoproto.nullable) = false];

  // InitialDelaySeconds initial delay before checking health
  optional int32 initialDelaySeconds = 4 [(gogoproto.customname) = "InitialDelaySeconds", (gogoproto.nullable) = false];
}

// PlayerStatus stores the current player capacity values
message PlayerStatus {
  optional int64 count = 1 [(gogoproto.customname) = "Count", (gogoproto.nullable) = false];

  optional int64 capacity = 2 [(gogoproto.customname) = "Capacity", (gogoproto.nullable) = false];

  repeated string ids = 3 [(gogoproto.customname) = "IDs"];
}

// PlayersSpec tracks the initial player capacity
message PlayersSpec {
  optional int64 initialCapacity = 1 [(gogoproto.customname) = "InitialCapacity", (gogoproto.nullable) = false];
}

// SdkServer specifies parameters for the Agones SDK Server sidecar container
message SdkServer {
  // LogLevel for SDK server (sidecar) logs. Defaults to "Info"
  optional string logLevel = 1 [(gogoproto.casttype) = "SdkServerLogLevel", (gogoproto.customname) = "LogLevel", (gogoproto.nullable) = false];

  // GRPCPort is the port on which the SDK Server binds the gRPC server to accept incoming connections
  optional int32 grpcPort = 2 [(gogoproto.customname) = "GRPCPort", (gogoproto.nullable) = false];

  // HTTPPort is the port on which the SDK Server binds the HTTP gRPC gateway server to accept incoming connections
  optional int32 httpPort = 3 [(gogoproto.customname) = "HTTPPort", (gogoproto.nullable) = false];
}

